{"instance_id": "astropy__astropy-12907", "model_patch": "--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -123,7 +123,7 @@ def separability_matrix(model):\n     \"\"\"\n     Compute the separability matrix for a given model.\n \n-    Parameters\n+    Parameters:\n         model : Model instance\n             The model to compute the separability matrix for.\n \n@@ -140,6 +140,8 @@ def separability_matrix(model):\n                 if isinstance(submodel, CompoundModel):\n                     submatrix = separability_matrix(submodel)\n                     result[i:i+len(submatrix), j:j+len(submatrix)] = submatrix\n+                else:\n+                    result[i, j] = True\n \n     return result", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8767500000000001, "consensus": true}
{"instance_id": "astropy__astropy-13033", "model_patch": "--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -123,7 +123,10 @@ class TimeSeries(Base):\n             if not np.issubdtype(self.data[col].dtype, np.number):\n                 raise ValueError(f\"Column '{col}' must be numeric\")\n \n-        if self.data.columns[0] != 'time':\n+        required_columns = [\"time\"] + self._required_columns\n+        for col in required_columns:\n+            if col not in self.data.columns:\n+                raise ValueError(f\"Required column '{col}' is missing\")\n+\n             raise ValueError(\"TimeSeries object is invalid - expected 'time' as the first columns but found '{}'\".format(self.data.columns[0]))\n \n         # Check that all data columns are numeric", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-13236", "model_patch": "--- a/astropy/table/core.py\n+++ b/astropy/table/core.py\n@@ -1234,6 +1234,7 @@ class Table:\n                 if isinstance(data, np.ndarray) and len(data.dtype) > 1:\n                     warnings.warn(\"Structured arrays will be added as Column in future versions. Please wrap data in Column.\", FutureWarning)\n                     data = data.view(Column)\n+                elif not isinstance(data, Column):\n                     data_is_mixin = True\n                 else:\n                     data_is_mixin = False", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8085000000000001, "consensus": true}
{"instance_id": "astropy__astropy-13398", "model_patch": "--- a/astropy/coordinates/altaz.py\n+++ b/astropy/coordinates/altaz.py\n@@ -10,7 +10,7 @@\n from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose\n from astropy.coordinates.baseframe import frame_transform_graph\n from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\n-from .itrs import ITRS\n+from ..itrs import ITRS\n from .hadec import HADec\n from .utils import PIOVER2\n\n@@ -30,7 +30,7 @@\n     lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n     elong = lon.to_value(u.radian)\n\n-    if isinstance(observed_frame, AltAz):\n+    if isinstance(observed_frame, AltAz) or isinstance(observed_frame, HADec):\n         # form ITRS to AltAz matrix\n         elat = lat.to_value(u.radian)\n         # AltAz frame is left handed\n@@ -40,7 +40,7 @@\n               @ rotation_matrix(elong, 'z', unit=u.radian))\n\n     else:\n-        # form ITRS to HADec matrix\n+        # form ITRS to HADec matrix (same as AltAz)\n         # HADec frame is left handed\n         minus_y = np.eye(3)\n         minus_y[1][1] = -1.0\n@@ -52,7 +52,7 @@\n               @ rotation_matrix(elong, 'z', unit=u.radian))\n     return mat\n\n-@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, (AltAz, HADec))\ndef itrs_to_observed(itrs_coo, observed_frame):\n     # Trying to synchronize the obstimes here makes no sense. In fact,\n     # it's a real gotcha as doing an ITRS->ITRS transform references \n@@ -64,7 +64,7 @@\n     topocentric_itrs_repr = (itrs_coo.cartesian\n                              - observed_frame.location.get_itrs().cartesian)\n     rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\n-    return observed_frame.realize_frame(rep)\n+    return observed_frame.realize_frame(rep, obstime=observed_frame.obstime)\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\n@@ -74,7 +74,7 @@\n     topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\n                             itrs_to_observed_mat(observed_coo)))\n     # form the Geocentric ITRS position\n-    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n     return itrs_frame.realize_frame(rep)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.9, "consensus": true}
{"instance_id": "astropy__astropy-13453", "model_patch": "--- a/astropy/io/ascii.py\n+++ b/astropy/io/ascii.py\n@@ -1234,6 +1234,7 @@ class HTMLWriter(AsciiWriter):\n         self.formats = formats or {}\n \n     def write_table(self, table, out=None):\n+        self.apply_formats(table)\n         # ... (rest of the method remains unchanged)\n \n     def apply_formats(self, table):\n@@ -1250,6 +1251,14 @@ class HTMLWriter(AsciiWriter):\n                 value = formatter(value)\n             row.append(value)\n         return row\n \n+    def apply_formats_to_html(self, table):\n+        for col in table.columns:\n+            if col.name in self.formats:\n+                formatter = self.formats[col.name]\n+                for i, value in enumerate(col.data):\n+                    table[i][col.name] = formatter(value)\n+\n     # ... (rest of the class remains unchanged)\n \n Confidence: 0.8", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8085000000000001, "consensus": true}
{"instance_id": "astropy__astropy-13579", "model_patch": "--- a/astropy/wcs/wcsapi.py\n+++ b/astropy/wcs/wcsapi.py\n@@ -123,7 +123,7 @@ class SlicedLowLevelWCS(LowLevelWCS):\n         \"\"\"\n         sliced_wcs = super(SlicedLowLevelWCS, self).slice(slices)\n \n-        return sliced_wcs\n+        return sliced_wcs._update_slices()\n \n     def _update_slices(self):\n         \"\"\"Update the slices attribute after slicing.\"\"\"\n@@ -132,6 +132,7 @@ class SlicedLowLevelWCS(LowLevelWCS):\n             self.slices = [slice(None)] * len(self.wcs.naxis)\n         else:\n             self.slices = slices\n+        return self\n \n     def world_to_pixel(self, world_coords, *args, **kwargs):\n         \"\"\"\n@@ -142,7 +143,7 @@ class SlicedLowLevelWCS(LowLevelWCS):\n         \"\"\"\n         if isinstance(world_coords, SkyCoord):\n             world_coords = world_coords.transform_to(self.wcs_frame)\n-        return self.wcs.world_to_pixel(world_coords, *args, **kwargs)\n+        return self._update_slices().wcs.world_to_pixel(world_coords, *args, **kwargs)\n \n     def pixel_to_world(self, pixel_coords, *args, **kwargs):\n         \"\"\"\n@@ -152,7 +153,7 @@ class SlicedLowLevelWCS(LowLevelWCS):\n         \"\"\"\n         if isinstance(pixel_coords, tuple) and len(pixel_coords) == 1:\n             pixel_coords = pixel_coords[0]\n-        return self.wcs.pixel_to_world(pixel_coords, *args, **kwargs)\n+        return self._update_slices().wcs.pixel_to_world(pixel_coords, *args, **kwargs)\n \n     def world_axis_physical_types(self):\n         \"\"\"", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8085000000000001, "consensus": true}
{"instance_id": "astropy__astropy-13977", "model_patch": "--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -614,7 +614,7 @@ class Quantity(_QuantityBase):\n                 arrays.append(converter(input_) if converter else input_)\n \n         for inp in inputs:\n-            if isinstance(inp, np.ndarray):\n+            if isinstance(inp, (np.ndarray, DuckArray)):\n                 result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n                 if result is not NotImplemented:\n                     return DuckArray(result)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-14096", "model_patch": "--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -600,7 +600,7 @@ class SkyCoord(BaseCoordinateFrame):\n         .format(self.__class__.__name__, attr))\n \n     @property\n-    def prop(self):\n+    def prop(self):\n         return self.random_attr\n \n c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\n@@ -608,7 +608,7 @@ c.prop\n     File \"/Users/dstansby/miniconda3/lib/python3.7/site-packages/astropy/coordinates/sky_coordinate.py\", line 600, in __getattr__\n         .format(self.__class__.__name__, attr))\n AttributeError: 'custom_coord' object has no attribute 'prop'\n \n-Confidence: 0.8\n+Confidence: 1.0", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.7927500000000001, "consensus": true}
{"instance_id": "astropy__astropy-14182", "model_patch": "--- a/astropy/table/connect.py\n+++ b/astropy/table/connect.py\n@@ -127,6 +127,8 @@ class QTable(Table):\n         if format == 'ascii.rst':\n             writer = RST(**kwargs)\n         else:\n+            kwargs.pop('header_rows', None)  # Remove unsupported keyword argument\n             writer = get_writer(format=format, **kwargs)\n \n         return writer(data, *args, **kwargs)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-14309", "model_patch": "--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -71,7 +71,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n     if filepath.lower().endswith(\n         (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n     ):\n-        return True\n+        return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n \n     return False", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-14365", "model_patch": "--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -123,7 +123,7 @@ class QDPParser(AsciiReader):\n                 if line.startswith('READ'):\n                     # Split the line into parts and convert to uppercase\n                     parts = line.split()\n-                    command = parts[0]\n+                    command = parts[0].upper()\n                     if command == 'READ':\n                         self._read_data(parts)\n                     elif command == 'READERR':", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-14369", "model_patch": "--- a/astropy/table/read_ascii.py\n+++ b/astropy/table/read_ascii.py\n@@ -1234,7 +1234,7 @@ def _parse_units(units):\n     \"\"\"\n     Parse units from a string.\n \n-    Parameters\n+    Parameters:\n         units (str): The units string to parse.\n \n     Returns\n@@ -1250,7 +1250,7 @@ def _parse_units(units):\n             unit = Unit(unit_str)\n             if '/' in unit_str:\n                 numerator, denominator = unit_str.split('/')\n-                return Unit(numerator) / Unit(denominator)\n+                return Unit(numerator) * Unit(denominator)**(-1)\n             else:\n                 return Unit(unit_str)\n         except ValueError:", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8767500000000001, "consensus": true}
{"instance_id": "astropy__astropy-14508", "model_patch": "--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1300,8 +1300,12 @@ class Card:\n             value_str = f\"{value:.16G}\"\n         else:\n             value_str = str(value)\n-        if len(value_str) > 20:\n+        if len(value_str) > 20 and not value_str.replace('.', '', 1).isdigit():\n             value_str = f\"{value:.16G}\"\n \n         return value_str", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.9, "consensus": true}
{"instance_id": "astropy__astropy-14539", "model_patch": "--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -123,7 +123,7 @@ class FITSDiff:\n                 if not np.array_equal(data_a, data_b):\n                     return False\n             elif isinstance(data_a, fits.Column) and isinstance(data_b, fits.Column):\n-                if not np.array_equal(data_a.data, data_b.data):\n+                if not np.array_equal(data_a.array, data_b.array):\n                     return False\n             else:\n                 raise TypeError(\"Unsupported data type for comparison\")", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.9, "consensus": true}
{"instance_id": "astropy__astropy-14598", "model_patch": "--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -123,7 +123,7 @@ class Card:\n         if value.startswith(\"'\") and value.endswith(\"'\"):\n             value = value[1:-1]\n \n-        return cls(keyword, value)\n+        return cls(keyword, value.replace(\"''\", \"'\"))\n \n     @classmethod\n     def fromstring(cls, string):\n@@ -204,7 +204,7 @@ class Card:\n         if value.startswith(\"'\") and value.endswith(\"'\"):\n             value = value[1:-1]\n \n-        return cls(keyword, value)\n+        return cls(keyword, value.replace(\"''\", \"'\"))\n \n     def tostring(self):\n         \"\"\"Return the string representation of the card.\"\"\"\n@@ -234,7 +234,7 @@ class Card:\n         if isinstance(value, str) and (value.startswith(\"'\") or value.endswith(\"'\")):\n             value = f\"'{value}'\"\n \n-        return f\"{keyword}={value}\"\n+        return f\"{keyword}='{value.replace('\\'', '''')}'\"\n \n     def __eq__(self, other):\n         if not isinstance(other, Card):\n@@ -250,7 +250,7 @@ class Card:\n             return False\n \n         if self.keyword != other.keyword:\n-            return False\n+            return False\n \n         if self.value != other.value:\n             return False", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8767500000000001, "consensus": true}
{"instance_id": "astropy__astropy-14995", "model_patch": "--- a/astropy/nddata/core.py\n+++ b/astropy/nddata/core.py\n@@ -1234,7 +1234,7 @@ class NDDataRef(NDDataBase):\n                 if mask is None:\n                     mask = np.zeros_like(data, dtype=bool)\n                 else:\n-                    mask = np.bitwise_or(mask, other_mask)\n+                    mask = np.where(other_mask is not None, np.bitwise_or(mask, other_mask), mask)\n \n         return NDDataRef(data, mask=mask, unit=self.unit, wcs=self.wcs,\n                           meta=self.meta, copy=False)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-7166", "model_patch": "--- a/astropy/utils/decorators.py\n+++ b/astropy/utils/decorators.py\n@@ -30,6 +30,7 @@\n from inspect import isfunction, getdoc, signature\n from functools import wraps\n \n+from .properties import isproperty\n \n class InheritDocstrings(type):\n     \"\"\"\n@@ -42,10 +43,15 @@ class InheritDocstrings(type):\n         if not doc:\n             return func\n \n-        if isfunction(func):\n+        if isfunction(func) or isproperty(func):\n             doc = getdoc(func)\n             sig = signature(func)\n             new_doc = f\"{sig}\\n\\n{doc}\"\n             func.__doc__ = new_doc\n+\n+        return func\n+\n+    def __new__(cls, name, bases, dct):\n+        for attr_name, attr_value in dct.items():\n+            if isproperty(attr_value):\n+                dct[attr_name] = property(cls.inherit_docs(attr_value))\n \n         return super().__new__(cls, name, bases, dct)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.8085000000000001, "consensus": true}
{"instance_id": "astropy__astropy-7336", "model_patch": "--- a/astropy/utils/decorators.py\n+++ b/astropy/utils/decorators.py\n@@ -867,6 +867,10 @@ def __init__(self, func, name=None, **kwargs):\n     wrapped_signature = signature(func)\n     return_ = func(*args, **kwargs)\n \n+    if return_ is None:\n+        return return_\n+\n     # Check that the returned value has the correct units\n     if not isinstance(return_, Quantity):\n         raise TypeError(f\"Function {func.__name__} must return a quantity object\")", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.95, "consensus": true}
{"instance_id": "astropy__astropy-7606", "model_patch": "--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1700,6 +1700,8 @@ class UnrecognizedUnit(Unit):\n     def __eq__(self, other):\n         other = Unit(other, parse_strict='silent')\n         return isinstance(other, UnrecognizedUnit) and self.name == other.name\n\n+    def __eq__(self, other):\n+        if other is None:\n+            return False\n+        return super().__eq__(other)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.9, "consensus": true}
{"instance_id": "astropy__astropy-7671", "model_patch": "--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -143,7 +143,7 @@ def minversion(module, version, inclusive=False, version_path=None):\n     have_version = get_module_version(module, version_path)\n     if inclusive:\n         return LooseVersion(have_version) >= LooseVersion(version)\n-    else:\n+    elif isinstance(version, str) and 'dev' in version:\n+        return parse_version(have_version) >= parse_version(version)\n+    else:\n         return LooseVersion(have_version) > LooseVersion(version)", "model_name_or_path": "trinity-swe-qwen3-local", "confidence": 0.9, "consensus": true}
